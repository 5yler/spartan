# For running the standalone version, we need pcg options:
point_cloud_generator_options:
    # Scene sampling mode 0 = center of each face
    # scene sampling mode 1 = num_rays surface points randomly uniformly across faces of specified model, or all of them (don't specify model)
    # scene sampling mode 2 = num_rays surface points, within sample_distance of a random vertex on specified model (or random model if unspecified)
    scene_sampling_mode: 1
    num_rays: 10 # if using random scene point sampling, sample this many points
    sample_distance: 0.05
    
    models:
       #- urdf: "models/urdf/cubes_jointed.urdf"
       #  q0: [0.1, 0, 0.5, 0.9, 0.5, 0.2, 0.2]
       #- urdf: "../urdf/cubes.urdf"
       #  q0: [0.5, 0, 0, 0, 0, 0.2, 0.1, 0, 0, 0, 0, -0.2]
       - urdf: "../urdf/cube.urdf"
         q0: [0.5, 0, 0, 0, 0, 0.2]


detector_options:
    #detector_type: "world_to_body_transforms"
    detector_type: "body_to_world_transforms"

    # options of rot constraints:
    # 0: constrained to ground truth
    # 1: unconstrained
    # 2: columnwise and row-wise L1-norm >= 1
    # 3: McCormick quaternion
    # 4: McCormick directly on rotmat
    # 5: Conservative RPY limits
    rotation_constraint: 4
    rotation_constraint_num_faces: 2

    allow_outliers: false
    phi_max: 0.05
    use_initial_guess: false
    corruption_amount: 0.0

    big_M: 2.0

    downsample_to_this_many_points: 30
    model_sample_rays: 30

    gurobi_int_options:
        #MIPFocus: 1
        #PoolSearchMode: 0
        #PoolSolutions: 20
        #SubMIPNodes: 1000
        Threads: 10

    gurobi_float_options:
        TimeLimit: 3000
        #PoolGap: 0.0
        FeasRelaxBigM: 2
        MIPGapAbs: 0.0001
        #Heuristics: 0.05

    models:
       #- urdf: "models/urdf/cubes_jointed.urdf"
       #  q0: [0.1, 0, 0.5, 0.9, 0.5, 0.2, 0.2]
       #- urdf: "../urdf/cubes.urdf"
       #  q0: [0.5, 0, 0, 0, 0, 0.2, 0.1, 0, 0, 0, 0, -0.2]
       - urdf: "models/urdf/cube.urdf"
         q0: [0.1, 0, 0.5, 0.9, 0.5, 0.2]